/**
 * This file has been generated using TS-CLI.
 * It contains the complete UT of service making URL calls to a backend
 */

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule,
         HttpTestingController } from '@angular/common/http/testing';
import { EMPTY } from 'rxjs';

import { %Models_NAME%Service } from './%models_NAME%.service';
import { MOCK_ACTOR_MODELS } from 'src/test/mock/actor.mock';

describe('%Models_NAME%Service', () => {
  let service: %Models_NAME%Service;
  let httpTestingController: HttpTestingController;
  const BASEURL = '/api/actor';

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        { provide: 'API_%MODELS_NAME%_URL', useValue: BASEURL },
      ],
      imports: [ HttpClientTestingModule ],
    });
    service = TestBed.inject(%Models_NAME%Service);
    httpTestingController = TestBed.get(HttpTestingController);
  });

  afterEach(() => {
    httpTestingController.verify();
  });

  describe('constructor', () => {
    it('should be created', () => {
      expect(service).toBeTruthy();
    });
  });

  describe('create', () => {
    it('should call the expected Url', async () => {
      let response;
      let error;
      const data = MOCK_%MODEL_NAME%_MODELS[0];
      await service.create(data).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}`);
      req.flush(data);
      expect(error).toBeUndefined();
      expect(response).toEqual(data);
      expect(req.request.method).toEqual('POST');
    });
    it(`should call 'errorCathing' function and return 'EMPTY' if an error is catched`, async () => {
      let response;
      let error;
      const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
      const dataInput = MOCK_%MODEL_NAME%_MODELS[0];
      const data = 'Invalid request parameters';
      await service.create(dataInput).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}`);
      req.flush(data, mockErrorResponse);
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
    });
  });

  describe('getAll', () => {
    it('should call the expected Url', async () => {
      let response;
      let error;
      const data = MOCK_%MODEL_NAME%_MODELS;
      await service.getAll().subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(BASEURL);
      req.flush(data);
      expect(error).toBeUndefined();
      expect(response).toEqual(data);
      expect(req.request.method).toEqual('GET');
    });
    it(`should call 'errorCathing' function and return 'EMPTY' if an error is catched`, async () => {
      let response;
      let error;
      const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
      const data = 'Invalid request parameters';
      await service.getAll().subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(BASEURL);
      req.flush(data, mockErrorResponse);
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
    });
  });

  describe('getById', () => {
    it('should call the expected Url', async () => {
      let response;
      let error;
      const id = 'abc';
      const data = MOCK_%MODEL_NAME%_MODELS;
      await service.getById(id).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${id}`);
      req.flush(data);
      expect(error).toBeUndefined();
      expect(response).toEqual(data);
      expect(req.request.method).toEqual('GET');
    });
    it(`should call 'errorCathing' function and return 'EMPTY' if an error is catched`, async () => {
      let response;
      let error;
      const id = 'abc';
      const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
      const data = 'Invalid request parameters';
      await service.getById(id).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${id}`);
      req.flush(data, mockErrorResponse);
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
    });
  });

  describe('update', () => {
    it('should call the expected Url', async () => {
      let response;
      let error;
      const data = MOCK_%MODEL_NAME%_MODELS[0];
      await service.update(data).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${data.id}`);
      req.flush(data);
      expect(error).toBeUndefined();
      expect(response).toEqual(data);
      expect(req.request.method).toEqual('PUT');
    });
    it(`should call 'errorCathing' function and return 'EMPTY' if an error is catched`, async () => {
      let response;
      let error;
      const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
      const dataInput = MOCK_%MODEL_NAME%_MODELS[0];
      const data = 'Invalid request parameters';
      await service.update(dataInput).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${dataInput.id}`);
      req.flush(data, mockErrorResponse);
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
    });
  });

  describe('delete', () => {
    it('should call the expected Url', async () => {
      let response;
      let error;
      const data = MOCK_%MODEL_NAME%_MODELS[0];
      await service.delete(data.id).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${data.id}`);
      req.flush(data);
      expect(error).toBeUndefined();
      expect(response).toEqual(data);
      expect(req.request.method).toEqual('DELETE');
    });
    it(`should call 'errorCathing' function and return 'EMPTY' if an error is catched`, async () => {
      let response;
      let error;
      const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
      const dataInput = MOCK_%MODEL_NAME%_MODELS[0];
      const data = 'Invalid request parameters';
      await service.delete(dataInput.id).subscribe(
        resp => response = resp,
        err => error = err,
      );
      const req = httpTestingController.expectOne(`${BASEURL}/${dataInput.id}`);
      req.flush(data, mockErrorResponse);
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
    });
  });
});
