/**
 * This file has been generated using TS-CLI.
 * This file contains the service to Create, Read, Update and Delete %Model_NAME% Objects.
 */

import { Model } from 'mongoose';
import { Injectable, Inject } from '@nestjs/common';
import { InjectModel }        from '@nestjs/mongoose';
import { Observable, of, from, throwError } from 'rxjs';
import { switchMap, mergeMap, concatMap, map, toArray, catchError } from 'rxjs/operators';

import { Logger } from '../tools/logger/logger';
import { %Model_NAME% } from '../models/%model_NAME%.model';
import { I%Model_NAME%DBO } from '../dbo/%model_NAME%.schema';
import { %Model_NAME%Mapper } from '../mappers/%model_NAME%.mapper';

@Injectable()
export class %Models_NAME%Service {

  constructor(
    private readonly logger: Logger,
    @Inject('%MODEL_NAME%_MODEL') private readonly %model_NAME%Model: Model<I%Model_NAME%DBO>,
  ) {

  }

  /**
   * Create a %Model_NAME% Object in the database
   * @param data information to record in the database
   */
  public create(user: string): Observable<%Model_NAME%> {
    return of(%Model_NAME%Mapper.createDBO({
      id: undefined,
      softDeleted: false,
      creationDate: undefined,
      lastModificationDate: undefined,
      lastModificationBy: user,
    })).pipe(
      switchMap((%model_NAME%: I%Model_NAME%DBO) => {
        %model_NAME%.save();
        return of(%model_NAME%);
      }),
      switchMap((%model_NAME%: I%Model_NAME%DBO) => of(%Model_NAME%Mapper.fromDBO(%model_NAME%))));
  }

  /**
   * Get a %Model_NAME% Object based on its UID
   * @param id the UID of the Object
   */
  public getById(id: string): Observable<%Model_NAME%> {
    return from(this.%model_NAME%Model.findOne({ _id: id })).pipe(
      switchMap((dbo: I%Model_NAME%DBO) => {
        if (dbo === null) {
          return throwError(new Error(`No %model_NAME% with id ${id} was found`));
        }
        return of(%Model_NAME%Mapper.fromDBO(dbo));
      }),
      catchError(err => {
        // @TODO log error
        return throwError(err);
      }),
    );
  }

  /**
   * Get all the %Model_NAME% considering a pagintation
   */
  public getAll(): Observable<%Model_NAME%[]> {
    return from(this.%model_NAME%Model.find()).pipe(
      switchMap((dbos: I%Model_NAME%DBO[]) => dbos.map(dbo => %Model_NAME%Mapper.fromDBO(dbo))),
      toArray(),
      catchError(err => {
        this.logger.error(`${err.message}`, err.trace);
        return throwError(err);
      }),
    );
  }

  /**
   * Updates an %model_NAME% document in the %model_NAME%s collection
   * @param %model_NAME% the %model_NAME% model containing the old & updated values
   */
  update(%model_NAME%: %Model_NAME%): Observable<%Model_NAME%> {
    return from(this.%model_NAME%Model.findOneAndUpdate({ _id: %model_NAME%.id }, { ...%model_NAME% })).pipe(
      map((updateResult) => %Model_NAME%Mapper.fromDBO(updateResult)),
      catchError(err => {
        this.logger.error(`${err.message}`, err.trace);
        return throwError(err);
      }),
    );
  }

}
