/**
 * This file has been generated using TS-CLI.
 */

import { Controller, Get, Post, Param, Put, Body } from '@nestjs/common';
import { Observable, throwError } from 'rxjs';
import { mergeMap, map, toArray } from 'rxjs/operators';

import { Logger } from '../tools/logger/logger';
import { %Models_NAME%Service } from '../services/%model_NAME%.service';
import { %Model_NAME% } from '../models/%model_NAME%.model';
import { %Model_NAME%DTO } from '../dto/%model_NAME%.dto';
import { %Model_NAME%Mapper } from '../mappers/%model_NAME%.mapper';

@Controller('api/%model_NAME%')
export class %Models_NAME%Controller {

  constructor(
    private readonly logger: Logger,
    private readonly %models_NAME%Service: %Models_NAME%Service,
  ) {
  }

  @Get()
  getAll(): Observable<%Model_NAME%DTO[]> {
    return this.%models_NAME%Service.getAll().pipe(
      mergeMap((%model_NAME%: %Model_NAME%[]) => %model_NAME%),
      map((model: %Model_NAME%) => %Model_NAME%Mapper.toDTO(model)),
      toArray(),
    );
  }

  @Post()
  create(): Observable<%Model_NAME%DTO> {
    return this.%models_NAME%Service.create('user1');
  }

  @Get('/:id')
  getById(@Param('id') id: string): Observable<%Model_NAME%DTO> {
    if (!id || id.trim().length <= 0 || id === 'null' || id === 'undefined') {
      const errorMsg = 'No id provided';
      this.logger.error(errorMsg, '%Models_NAME%Controller::getById');
      return throwError(new Error(errorMsg));
    }

    return this.%models_NAME%Service.getById(id).pipe(
      map((model: %Model_NAME%) => %Model_NAME%Mapper.toDTO(model)),
    );
  }

  @Put('/:id')
  update(@Param('id') id: string, @Body() dto: %Model_NAME%DTO): Observable<%Model_NAME%DTO> {
    if (!id || id.trim().length <= 0 || id === 'null' || id === 'undefined') {
      const errorMsg = 'No id provided';
      this.logger.error(errorMsg, '%Models_NAME%Controller::update');
      return throwError(new Error(errorMsg));
    }
    const %model_NAME% = %Model_NAME%Mapper.fromDTO(dto);
     return this.%models_NAME%Service.update(%model_NAME%).pipe(
      map(%model_NAME%Updated => %Model_NAME%Mapper.toDTO(%model_NAME%Updated)),
    );
  }
}
