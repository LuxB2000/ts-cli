/**
 * This file has been generated using TS-CLI.
 */

import { Test, TestingModule } from '@nestjs/testing';
import { of } from 'rxjs';
import { %Models_NAME%Controller } from './%model_NAME%.controller';
import { %Models_NAME%Service } from '../services/%model_NAME%.service';
import { %Models_NAME%ServiceStub } from '../test/mock/%model_NAME%.mock.service';
import { %Model_NAME%Mapper } from '../mappers/%model_NAME%.mapper';
import { MOCK_%MODEL_NAME%_DTOS, MOCK_%MODEL_NAME%_MODELS } from '../test/data/%model_NAME%.mock.data';
import { MockLogger } from '../test/mock/logger.mock';
import { Logger } from '../tools/logger/logger';

describe('%Models_NAME% Controller', () => {
  let controller: %Models_NAME%Controller;
  let service: %Models_NAME%Service;
  const now = new Date(Date.now());
  let logger: Logger;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [
        %Models_NAME%Controller,
      ],
      providers: [
        {provide: %Models_NAME%Service, useClass: %Models_NAME%ServiceStub},
        {provide: Logger, useClass: MockLogger},
      ]
    }).compile();

    controller = module.get<%Models_NAME%Controller>(%Models_NAME%Controller);
    service = module.get<%Models_NAME%Service>(%Models_NAME%Service);
    logger = module.get<Logger>(Logger);

    // mock the time for creationDate
    jest.spyOn(Date, 'now').mockImplementation(() => now.getMilliseconds());
  });

  describe('constructor', () => {
    it('should be defined', () => {
      expect(controller).toBeDefined();
    });
  });

  describe('getAll', () => {
    it(`should call service.getAll()`, async () => {
      let response;
      let error;
      const serviceSpy = jest.spyOn(service, 'getAll');
      await controller.getAll().subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(serviceSpy).toHaveBeenCalledTimes(1);
    });
    it(`should map the response from the service to a DTO and return it`, async () => {
      let response;
      let error;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      await controller.getAll().subscribe(
        res => response = res,
        err => error = err,
      );

      expect(error).toBeUndefined();
      expect(mapperSpy).toHaveBeenCalledTimes(1);
      expect(mapperSpy).toHaveBeenCalledWith(MOCK_%MODEL_NAME%_MODELS[0]);
      expect(response).not.toBeUndefined();
      expect(response).toEqual(MOCK_%MODEL_NAME%_DTOS);
    });
  });

  describe('create', () => {
    it(`should call the service.create function`, async () => {
      let response;
      let error;
      const serviceSpy = jest.spyOn(service, 'create');
      await controller.create().subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(serviceSpy).toHaveBeenCalledTimes(1);
    });
  });
 
  describe('getById', () => {
    const id = 'abc';
    it(`should call service.getById()`, async () => {
      let response;
      let error;
      const serviceSpy = jest.spyOn(service, 'getById');
      await controller.getById(id).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(serviceSpy).toHaveBeenCalledTimes(1);
    });
    it(`should map the response from the service to a DTO and return it`, async () => {
      let response;
      let error;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      await controller.getById(id).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      // expect(mapperSpy).toHaveBeenCalledTimes(1);
      expect(mapperSpy).toHaveBeenCalledWith(MOCK_%MODEL_NAME%_MODELS[0]);
      expect(response).toEqual(MOCK_%MODEL_NAME%_DTOS[0]);
    });
    it('should return and log an error if no id is provided', async () => {
      let response;
      let error;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      const loggerSpy = jest.spyOn(logger, 'error');
      await controller.getById(undefined).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).not.toBeUndefined();
      expect(response).toBeUndefined();
      expect(loggerSpy).toHaveBeenCalledWith('No id provided', '%Models_NAME%Controller::getById');
    });
  });

  describe('update', () => {
    const id = `abc`;
    it('should call service.update()', async () => {
      let response;
      let error;
      const serviceSpy = jest.spyOn(service, 'update').mockReturnValue(of(MOCK_%MODEL_NAME%_MODELS[0]));;
      await controller.update(id, MOCK_%MODEL_NAME%_DTOS[0]).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(serviceSpy).toHaveBeenCalledTimes(1);
    });
    it('should call %Model_NAME%Mapper.fromDTO()', async () => {
      let response;
      let error;
      jest.spyOn(service, 'update').mockReturnValue(of(MOCK_%MODEL_NAME%_MODELS[0]));;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'fromDTO').mockReturnValue(MOCK_%MODEL_NAME%_MODELS[0]);;
      await controller.update(id, MOCK_%MODEL_NAME%_DTOS[0]).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(mapperSpy).toHaveBeenCalledTimes(1);
    });
    it('should call %Model_NAME%Mapper.toDTO()', async () => {
      let response;
      let error;
      jest.spyOn(service, 'update').mockReturnValue(of(MOCK_%MODEL_NAME%_MODELS[0]));;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);;
      await controller.update(id, MOCK_%MODEL_NAME%_DTOS[0]).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).not.toBeUndefined();
      expect(mapperSpy).toHaveBeenCalled(); //Times(1); // why call multiple times?
    });
    it('should return and log an error if no id is provided', async () => {
      let response;
      let error;
      jest.spyOn(service, 'update').mockReturnValue(of(MOCK_%MODEL_NAME%_MODELS[0]));;
      const loggerSpy = jest.spyOn(logger, 'error');
      await controller.update(undefined, MOCK_%MODEL_NAME%_DTOS[0]).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).not.toBeUndefined();
      expect(response).toBeUndefined();
      expect(loggerSpy).toHaveBeenCalledWith('No id provided', '%Models_NAME%Controller::update');
    });
    it('should return and log an error if an empty string is provided', async () => {
      let response;
      let error;
      jest.spyOn(service, 'update').mockReturnValue(of(MOCK_%MODEL_NAME%_MODELS[0]));;
      const loggerSpy = jest.spyOn(logger, 'error');
      await controller.update('', MOCK_%MODEL_NAME%_DTOS[0]).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).not.toBeUndefined();
      expect(response).toBeUndefined();
      expect(loggerSpy).toHaveBeenCalledWith('No id provided', '%Models_NAME%Controller::update');
    });
  });

  describe('delete', () => {
    it('should throw an error if no id is provided', async () => {
      let response;
      let error;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      const loggerSpy = jest.spyOn(logger, 'error');
      await controller.delete(undefined).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).not.toBeUndefined();
      expect(response).toBeUndefined();
      expect(loggerSpy).toHaveBeenCalledWith('No id provided', '%Models_NAME%Controller::delete');
    });
    it('should throw an error if an empty id is provided', async () => {
      let response;
      let error;
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      const loggerSpy = jest.spyOn(logger, 'error');
      await controller.delete('').subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).not.toBeUndefined();
      expect(response).toBeUndefined();
      expect(loggerSpy).toHaveBeenCalledWith('No id provided', '%Models_NAME%Controller::delete');
    });
    it('should call the service.delete function', async () => {
      let response;
      let error;
      let id = 'abc';
      const mapperSpy = jest.spyOn(%Model_NAME%Mapper, 'toDTO').mockReturnValue(MOCK_%MODEL_NAME%_DTOS[0]);
      const serviceSpy = jest.spyOn(service, 'delete');
      await controller.delete(id).subscribe(
        res => response = res,
        err => error = err,
      );
      expect(error).toBeUndefined();
      expect(response).toBeUndefined();
      expect(serviceSpy).toHaveBeenCalledWith(id);
    });
    it('should throw an error if the service.delete function throw an error', async () => {});
  });
});
