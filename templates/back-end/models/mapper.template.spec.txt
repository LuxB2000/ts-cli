/**
 * This file has been generated using TS-CLI.
 * This file contains the Unit test relative the %Model_NAME% Mapper.
 */

import { %Model_NAME%Mapper } from './%model_NAME%.mapper';
import { MOCK_%MODEL_NAME%_DTOS, MOCK_%MODEL_NAME%_MODELS, MOCK_%MODEL_NAME%_DBOS, MOCK_PAGINATED_%MODELS_NAME%} from '../test/data/%model_NAME%.mock.data';
import { I%Model_NAME%DBO } from '../dbo/%model_NAME%.schema';

describe('AlgorithmMapper', () => {
  describe('toDTO', () => {
    it(`should correctly map a model into a DTO`, () => {
      expect(%Model_NAME%Mapper.toDTO(MOCK_%MODEL_NAME%_MODELS[0])).toEqual({
        id: MOCK_%MODEL_NAME%_DTOS[0].id,
        creationDate: MOCK_%MODEL_NAME%_DTOS[0].creationDate,
      });
    });
  });
  describe('fromDTO', () => {
    it(`should correctly map a model into a DTO`, () => {
      expect(%Model_NAME%Mapper.fromDTO(MOCK_%MODEL_NAME%_DTOS[0])).toEqual({
        id: MOCK_%MODEL_NAME%_DTOS[0].id,
        creationDate: MOCK_%MODEL_NAME%_DTOS[0].creationDate,
        lastModificationDate: undefined,
        lastModificationBy: undefined,
        softDeleleted: undefined,
      });
    });
  });
  describe('createDBO', () => {
    it(`should correctly map a model into a DBO`, () => {
      jest.spyOn(Date, 'now').mockReturnValue(12345);
      const dbo: I%Model_NAME%DBO = %Model_NAME%Mapper.createDBO(MOCK_%MODEL_NAME%_MODELS[0]);
      expect(dbo.id).toBeDefined();
      expect(dbo.lastModificationDate).toEqual(new Date(12345));
      expect(dbo.lastModificationBy).toEqual(MOCK_%MODEL_NAME%_DBOS[0].lastModificationBy);
      expect(dbo.creationDate).toEqual(new Date(12345));
    });
  });
  describe('fromDBO', () => {
    it(`should correcly map a DBO into a model`, () => {
      expect(%Model_NAME%Mapper.fromDBO(MOCK_%MODEL_NAME%_DBOS[0])).toEqual({
        id: MOCK_%MODEL_NAME%_DBOS[0].id,
        lastModificationDate: MOCK_%MODEL_NAME%_DBOS[0].lastModificationDate,
        creationDate: MOCK_%MODEL_NAME%_DBOS[0].creationDate,
        lastModificationBy: MOCK_%MODEL_NAME%_DBOS[0].lastModificationBy,
        softDeleted: MOCK_%MODEL_NAME%_DBOS[0].softDeleted,
      });
    });
  });
  describe('toPaginatedDTO', () => {
    it('should correcty map a paginated model to a paginated DTO', () => {
      expect(%Model_NAME%Mapper.toPaginatedDTO(MOCK_PAGINATED_%MODELS_NAME%)).toEqual({
        pageSize: MOCK_PAGINATED_%MODELS_NAME%.pageSize,
        pageIndex: MOCK_PAGINATED_%MODELS_NAME%.pageIndex,
        totalCount: MOCK_PAGINATED_%MODELS_NAME%.totalCount,
        %models_NAME%: [
          {id: MOCK_%MODEL_NAME%_DTOS[0].id, creationDate: MOCK_%MODEL_NAME%_DTOS[0].creationDate},
        ],
      });
    });
  });
});
