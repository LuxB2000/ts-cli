/**
 * This file has been generated using TS-CLI.
 * This class contains only static function mapping %Model_NAME% objects.
 */

import { %Model_NAME%, Paginated%Models_NAME% } from '../models/%model_NAME%.model';
import { %Model_NAME%DTO, Paginated%Models_NAME%DTO } from '../dto/%model_NAME%.dto';
import { I%Model_NAME%DBO, %Model_NAME%DBO } from '../dbo/%model_NAME%.schema';

export class %Model_NAME%Mapper {

  /**
   * Maps a buisness model into a DTO.
   * The properties `lastModificationDate`, `lastModificationBy` and `softDeleted` are lost
   * @param model the model to map into a DTO
   */
  static toDTO(model: %Model_NAME%): %Model_NAME%DTO {
    return {
      id: model.id,
      creationDate: model.creationDate,
    };
  }

  /**
   * Maps a DTO into a model.
   * The properties `lastModificationDate`, `lastModificationBy` and `softDeleted` properties are set to the value `undefined`
   * @param dto the DTO to map into a model
   */
  static fromDTO(dto: %Model_NAME%DTO): %Model_NAME% {
    return {
      id: dto.id,
      creationDate: dto.creationDate,
      lastModificationDate: undefined,
      lastModificationBy: undefined,
      softDeleted: undefined,
    };
  }

  /**
   * Maps a model into a DBO.
   * No information is lost
   * @param model the model containing all the informations to store in DB
   */
  static createDBO(model: %Model_NAME%): I%Model_NAME%DBO {
    return new %Model_NAME%DBO({
      creationDate: new Date(Date.now()),
      lastModificationDate: new Date(Date.now()),
      lastModificationBy: model.lastModificationBy,
    });
  }

  /**
   * Maps a DBO to a buisness model.
   * The property`_id` is renamed `id`.
   * @param dbo the DBO to map into a model
   */
  static fromDBO(dbo: I%Model_NAME%DBO): %Model_NAME% {
    return {
      id: dbo.id,
      creationDate: dbo.creationDate,
      lastModificationDate: dbo.lastModificationDate,
      lastModificationBy: dbo.lastModificationBy,
      softDeleted: dbo.softDeleted,
    };
  }

  /**
   * Maps a buisness paginated model to a DTO.
   * @param models the paginated buisness models
   */
  static toPaginatedDTO(models: Paginated%Models_NAME%): Paginated%Models_NAME%DTO {
    return {
      pageSize: models.pageSize,
      pageIndex: models.pageIndex,
      totalCount: models.totalCount,
      %models_NAME%: models.%models_NAME%.map((%model_NAME%: %Model_NAME%) => this.toDTO(%model_NAME%)),
    }
  }
}
